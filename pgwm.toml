[sizing]
# Height in pixels of the status_bar
# Cannot be 0 or larger than any monitor's height
# Instead of setting this to zero, to hide the bar either bind and use ToggleBar, or set it to hidden by default
# with `show_bar_initially`.
# CONSTRAINTS: Unsigned byte sizing, greater than zero
status_bar_height = 20
# Height in pixels of the tab bar showing which table are open (if in tabbed mode)
# CONSTRAINTS: Unsigned byte sizing, greater than zero
tab_bar_height = 20
# Pixels of empty space between tiled windows
# CONSTRAINTS: Unsigned byte sizing
window_padding = 8
# Pixels of every window's border (tiled or otherwise)
# CONSTRAINTS: Unsigned byte sizing
window_border_width = 3
# Amount of pixels to pad the space of the status-bar where workspace names are shown.
# CONSTRAINTS: Unsigned byte sizing
workspace_bar_window_name_padding = 8

[options]
# Determines whether to treat the tabbed draw mode as a single window and insert padding around it
pad_while_tabbed = true
# When a close-action is triggered (see key-bindings) the window is immediately unmapped.
# If not destroyed within this timeout in milliseconds the WM will send a destroy-client-request
# CONSTRAINTS: u64 sizing
destroy_after = 2000
# If not destroyed within this timeout in milliseconds after a destroy-client-request has been sent, a kill-client-request is sent
# Then the WM gives up on trying to kill the client.
# CONSTRAINTS: u64 sizing
kill_after = 5000
# X11 cursor name, to use for the WM, has to exist locally.
# A list of cursor names are found here http://manpages.ubuntu.com/manpages/xenial/man3/X11::CursorFont.3pm.html#:~:text=The%20full%20list%20is%20Name,32%20crosshair%2034%20%22%2B%22%20shape
cursor_name = "left_ptr"
# Show bar on start-up without having toggle it
show_bar_initially = true

[tiling-modifiers]
# The leader window's relative horizontal size in comparison with its tiling neighbours.
# In the left-leader-layout there are 2 windows tiled horizontally.
# With this value set to 2.0 this gives a relative left window size of 2.0/(2.0+1.0) = 2/3
# CONSTRAINTS: Above 0.0
left_leader = 2.0
# In the center-leader-layout there are 3 windows tiled horizontally.
# With this value set to 2.0 this gives a relative center window size of 2.0/(2.0+1.0+1.0) = 2/4,
# The center window takes up half the available monitor horizontal space.
# CONSTRAINTS: Above 0.0
center_leader = 2.0
# Similar to above this modifier affects windows that are vertically tiled
# With the same relative sizing as the above this property determines a window's relative size in its tiling direction.
# In the left-leader-scenario the second and following windows tile vertically, meaning if you have 3 windows tiled and increase
# the modifier at index 0, the top-right window will increase in height while its below neighbour will be displaced.
# With only two windows, the modifier on index 1 does not change any window's claim on the monitor real estate, as
# that window will then tile vertically while already taking up maximum height.
# CONSTRAINTS: All above 0.0, no longer than `WS_WINDOW_LIMIT` - 1
vertically_tiled = [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]

# Colors, RGBA color values
# CONSTRAINTS: All RGBA values has unsigned byte sizing
[colors]
# Window border color when not focused
window_border = [28, 31, 36, 0]
# Window border color when focused
window_border_highlighted = [223, 223, 223, 0]
# Window border color when signaled to be urgent
window_border_urgent = [224, 44, 16, 0]
# Workspace text box background color for a workspace that is show but not focused (multiple monitors)
workspace_bar_selected_unfocused_workspace_background = [56, 66, 82, 0]
# Workspace text box background color for unfocused workspaces
workspace_bar_unfocused_workspace_background = [28, 31, 36, 0]
# Workspace text box background color for the focused workspace
workspace_bar_focused_workspace_background = [48, 53, 168, 0]
# Workspace text box background color for a workspace containing an urgent window
workspace_bar_urgent_workspace_background = [224, 44, 16, 0]
# Text color for the workspace names
workspace_bar_workspace_section_text = [223, 223, 223, 0]
# Text color for the active window's WM_NAME/_NET_WM_NAME
workspace_bar_current_window_title_text = [223, 223, 223, 0]
# Background color for the portion of the bar that displays the above name
workspace_bar_current_window_title_background = [40, 44, 52, 1]
# Text for the status bar section
status_bar_text = [223, 223, 223, 0]
# Background color for the above
status_bar_background = [56, 66, 82, 0]
# Tab bar background for the focused tab
tab_bar_focused_tab_background = [56, 66, 82, 0]
# Tab bar background for unfocused tabs
tab_bar_unfocused_tab_background = [28, 31, 36, 0]
# Tab bar text color
tab_bar_text = [223, 223, 223, 0]
# Shortcut background color
shortcut_background = [28, 31, 36, 0]
# Shortcut text color
shortcut_text = [223, 223, 223, 0]

# Fonts that the WM uses to draw different sections
# Fonts are picked left-to right out of available fonts, drawing single chars and falling back if they are missing in the current render
# If no render can draw a character some x11 default character will be drawn instead.
[fonts]
# Fonts to use when drawing workspace names (top left of status-bar)
workspace_section = [
    { path = "/usr/share/fonts/TTF/JetBrains Mono Regular Nerd Font Complete Mono.ttf", size = "14.0" },
]
# Fonts to use when the currentl focused window's name
window_name_display_section = [
    { path = "/usr/share/fonts/TTF/JetBrains Mono Regular Nerd Font Complete Mono.ttf", size = "14.0" },
]
# Fonts to use when drawing the status section
status_section = [
    { path = "/usr/share/fonts/TTF/JetBrains Mono Regular Nerd Font Complete Mono.ttf", size = "14.0" },
]
# Fonts to use when drawing the name of tabbed windows
tab_bar_section = [
    { path = "/usr/share/fonts/TTF/JetBrains Mono Regular Nerd Font Complete Mono.ttf", size = "14.0" },
]
# Fonts to use when drawing the shortcut section
shortcut_section = [
    { path = "/usr/share/fonts/TTF/JetBrains Mono Regular Nerd Font Complete Mono.ttf", size = "14.0" },
]

# Mapping for specific characters to specific fonts.
# If a certain render contains a desired icon the mapping for that char-mapping is put below
[char-remap]
"\uf121" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf120" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf086" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\ue007" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Brands-Regular-400.otf", size = "13.0" }
"\uf1bc" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Brands-Regular-400.otf", size = "13.0" }
"\uf11b" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf7d9" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf02b" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf02c" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf2db" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf538" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf019" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf093" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf073" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf502" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }
"\uf304" = { path = "/usr/share/fonts/OTF/Font Awesome 6 Free-Solid-900.otf", size = "13.0" }

# Available workspaces and their names and respective class_name mappings
# The mapped_class_names is an array of wm class names
# If a window is spawned with a mapped class name it will be remapped to the specified workspace
# Finding a windows WM_CLASS_NAME property can be done with fe. `xprop` https://www.x.org/releases/X11R7.5/doc/man/man1/xprop.1.html
# default_draw is layout with which a workspace will start tiling windows in if nothing else is toggled,
# options are `LeftLeader`, `CenterLeader`, and `Tabbed`, `LeftLeader` is the default
[[workspace]]
name = "\uf121"
mapped_class_names = ["jetbrains-clion", "jetbrains-idea"]
default_draw = "LeftLeader"
[[workspace]]
name = "\uf120"
[[workspace]]
name = "\ue007"
mapped_class_names = ["firefox"]
[[workspace]]
name = "\uf086"
mapped_class_names = ["Slack", "discord"]
[[workspace]]
name = "\uf1bc"
mapped_class_names = ["spotify"]
[[workspace]]
name = "\uf11b"
[[workspace]]
name = "\uf7d9"
mapped_class_names = ["Pavucontrol"]
[[workspace]]
name = "\uf02b"
[[workspace]]
name = "\uf02c"

[bar]
[[bar.shortcuts]]
name = "\uf304"
[[bar.shortcuts]]
name = "\uf502"
# Status bar checks
# Ordering will determine the order that the checks are displayed
# Constraints, The icon + content can at most be `STATUS_BAR_CHECK_CONTENT_LIMIT`, probably fine just keep it short
# Commented out to avoid weirdness if not using batteries
# [[bar.status_checks]]
# interval = 1000
# check_type = { kind = "Battery", args = [
    # {above = 90, icon = "\uf240 "}, # Adding one space because this icon just doesn't fit right
    # {above = 75, icon = "\uf241 "},
    # {above = 50, icon = "\uf242 "},
    # {above = 25, icon = "\uf243 "},
    # {above = 0, icon = "\uf244 "},
# ]}
[[bar.status_checks]]
interval = 1000
check_type = { kind = "Cpu", args = { icon = "\uf2db", decimals = 1 }}
[[bar.status_checks]]
interval = 1000
check_type = { kind = "Mem", args = { icon = "\uf538", decimals = 1 }}
[[bar.status_checks]]
interval = 1000
check_type = { kind = "Net", args = { icon_up = "\uf093", icon_down = "\uf019", decimals = 1 }}
[[bar.status_checks]]
interval = 1000
# The pattern here can be at most `STATUS_BAR_DATE_PATTERN_LIMIT` bytes of utf8 characters, for reference this one is 85 bytes
# Your timezone's utc-offset is specified here, mostly because of performance, security, and future-proofing reasons.
check_type = { kind = "Date", args = { icon = "\uf073", pattern = "[weekday repr:short] [month repr:short] [day] w[week_number] [hour]:[minute]:[second]", utc_offset = [2, 0, 0]}}

# Mouse mappings
# M4 is usually super/win
# Mouse keys correspond to mouse button 1 etc
# CONSTRAINS: mods are any combination of Shift, Lock, Control, M1, M2, M3, M4, M5 and Any
# keys are any combination of M1, M2, M3, M4, M5, and Any, can also be empty
[[mouse-mapping]]
# Super key
mods = ["M4"]
# Mouse button 1
button = "M1"
target = { kind = "ClientWindow" }
# Set the window to float and move it while keeping the button down
on_click = { action = "MoveWindow" }
[[mouse-mapping]]
mods = ["M4"]
# Scroll up
button = "M4"
target = { kind = "ClientWindow" }
# Increase window size by n pixels
on_click = { action = "ResizeWindow", args = 4}
[[mouse-mapping]]
mods = ["M4"]
button = "M5"
target = { kind = "ClientWindow" }
# Decrease window size by n pixels
on_click = { action = "ResizeWindow", args = -4}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 0
target = { kind = "WorkspaceBarComponent", args = 0 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 0}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 1
target = { kind = "WorkspaceBarComponent", args = 1 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 1}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 2
target = { kind = "WorkspaceBarComponent", args = 2 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 2}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 3
target = { kind = "WorkspaceBarComponent", args = 3 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 3}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 4
target = { kind = "WorkspaceBarComponent", args = 4 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 4}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 5
target = { kind = "WorkspaceBarComponent", args = 5 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 5}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 6
target = { kind = "WorkspaceBarComponent", args = 6 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 6}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 7
target = { kind = "WorkspaceBarComponent", args = 7 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 7}
[[mouse-mapping]]
mods = []
button = "M1"
# Workspace 8
target = { kind = "WorkspaceBarComponent", args = 8 }
# Toggle it
on_click = { action = "ToggleWorkspace", args = 8}
[[mouse-mapping]]
mods = []
button = "M1"
# Press first status component
target = { kind = "StatusComponent", args = 0 }
# Pop htop using alacritty as term, close on exit
on_click = { action = "Spawn", args = ["alacritty", ["-e", "htop"]]}
[[mouse-mapping]]
mods = []
button = "M1"
# Press fourth
target = { kind = "StatusComponent", args = 3 }
# Open a new tab in firefox with a calendar
on_click = { action = "Spawn", args = ["firefox", ["-new-tab", "https://calendar.google.com"]]}
[[mouse-mapping]]
mods = []
button = "M1"
target = { kind = "ShortcutComponent", args = 0 }
# Pop a term with some configuration open, running with bash to be able to use `~` for home
on_click = { action = "Spawn", args = ["alacritty", ["-e", "bash", "-c", "nvim ~/.bashrc ~/.xinitrc ~/.config/pgwm/pgwm.toml"]]}
[[mouse-mapping]]
mods = []
button = "M1"
target = { kind = "ShortcutComponent", args = 1 }
# Lock screen
on_click = { action = "Spawn", args = ["xscreensaver-command", ["-lock"]]}

# Key mappings
# Available mods are same as for mouse mappings:
# Shift, Lock, Control, M1, M2, M3, M4, M5 and Any, or empty.
# Keys are x11 keysyms, sadly encoding this into an enum was not feasible, the definitions can be found here:
# https://cgit.freedesktop.org/xorg/proto/x11proto/tree/keysymdef.h
# (Logically below means in terms of the WMs internal state)
# CONSTRAINS: mods are any combination of Shift, Lock, Control, M1, M2, M3, M4, M5 and Any
# keys is a u32
[[key-mapping]]
mods = ["M4"]
key = 0x0062 # b
# Toggles the status bar of the focused monitor
on_click = { action = "ToggleBar" }
[[key-mapping]]
mods = ["M4"]
key = 0x006b # k
# Focuses the logically previous window on the focused workspace
on_click = { action = "FocusPreviousWindow" }
[[key-mapping]]
mods = ["M4"]
key = 0x006a # j
# Focuses the logically next window on the focused workspace
on_click = { action = "FocusNextWindow" }
[[key-mapping]]
mods = ["M4"]
key = 0x002c # ,
# Focuses the logically previous monitor of the focused monitor
on_click = { action = "FocusPreviousMonitor" }
[[key-mapping]]
mods = ["M4"]
key = 0x002e # .
# Focuses the logically next monitor of the focused monitor
on_click = { action = "FocusNextMonitor" }
[[key-mapping]]
mods = ["M4"]
key = 0x0020 # <space>
# Cycles the draw mode on the currently focused workspace, actually just toggles tabbed or not at the moment
on_click = { action = "CycleDrawMode" }
[[key-mapping]]
mods = ["M4"]
key = 0x006e # n
# Toggles the next tiling mode on the currently focused workspace (eg. left-leader to center-leader and back)
on_click = { action = "NextTilingMode" }
[[key-mapping]]
mods = ["M4"]
key = 0x006c # l
# Resizes the focused window by n pixels
on_click = { action = "ResizeWindow", args = 4 }
[[key-mapping]]
mods = ["M4"]
key = 0x0068 # h
# Resizes the focused window by n pixels
on_click = { action = "ResizeWindow", args = -4 }
[[key-mapping]]
mods = ["M4", "Shift"]
key = 0x006c # l
# Resizes the focused window's border by n pixels
on_click = { action = "ResizeBorders", args = 1 }
[[key-mapping]]
mods = ["M4", "Shift"]
key = 0x0068 # h
# Resizes the focused window's border by n pixels
on_click = { action = "ResizeBorders", args = -1 }
[[key-mapping]]
mods = ["M4", "Control", "Shift"]
key = 0x006c # l
# Resizes the focused window's padding by n pixels
on_click = { action = "ResizePadding", args = 1}
[[key-mapping]]
mods = ["M4", "Control", "Shift"]
key = 0x0068 # h
# Resizes the focused window's padding by n pixels
on_click = { action = "ResizePadding", args = -1}
[[key-mapping]]
mods = ["M4"]
key = 0x0072 # r
# Resets all resized windows to the provided default tiling sizes on the currently focused workspace
on_click = { action = "ResetToDefaultSizeModifiers" }
[[key-mapping]]
mods = ["M4"]
key = 0xff0d # <Return/enter>
# Sends the currently focused window to the logically first position of the tiling stack
on_click = { action = "SendToFront" }
[[key-mapping]]
mods = ["M4", "Shift"]
key = 0x0063 # c
# Unmaps the focused window and sends a delete-request
on_click = { action = "Close" }
[[key-mapping]]
mods = ["M4", "Shift"]
key = 0x0071 # q
# Gracefully exits the WM
on_click = { action = "Quit" }
[[key-mapping]]
mods = ["M4"]
key = 0x0074 # t
# Tiles the currently focused window
on_click = { action = "UnFloat" }
[[key-mapping]]
mods = ["M4"]
key = 0x0066 # f
# Sets the current workspace to display the currently focused window fullscreened
on_click = { action = "ToggleFullscreen" }
[[key-mapping]]
mods = ["M4"]
key = 0x0031 # 1
# Draws the workspace at index n on the currently focused monitor, if n is larger than the amount of configured amount
# of workspaces in [[workspaces]], the configuration won't pass validation
on_click = { action = "ToggleWorkspace", args = 0 }
[[key-mapping]]
mods = ["M4"]
key = 0x0032 # 2
on_click = { action = "ToggleWorkspace", args = 1 }
[[key-mapping]]
mods = ["M4"]
key = 0x0033 # 3
on_click = { action = "ToggleWorkspace", args = 2 }
[[key-mapping]]
mods = ["M4"]
key = 0x0034 # 4
on_click = { action = "ToggleWorkspace", args = 3 }
[[key-mapping]]
mods = ["M4"]
key = 0x0035 # 5
on_click = { action = "ToggleWorkspace", args = 4 }
[[key-mapping]]
mods = ["M4"]
key = 0x0036 # 6
on_click = { action = "ToggleWorkspace", args = 5 }
[[key-mapping]]
mods = ["M4"]
key = 0x0037 # 7
on_click = { action = "ToggleWorkspace", args = 6 }
[[key-mapping]]
mods = ["M4"]
key = 0x0038 # 8
on_click = { action = "ToggleWorkspace", args = 7 }
[[key-mapping]]
mods = ["M4"]
key = 0x0039 # 9
on_click = { action = "ToggleWorkspace", args = 8 }
[[key-mapping]]
mods = ["M4", "Shift"]
key = 0x0031 # 1
# Sends the currently focused window to the specified workspace at index n, if n is larger than the amount of configured amount
# of workspaces in [[workspaces]], the configuration won't pass validation
on_click = { action = "SendToWorkspace", args = 0 }
[[key-mapping]]
mods = ["M4", "Shift"]
key = 0x0032 # 2
on_click = { action = "SendToWorkspace", args = 1 }
[[key-mapping]]
mods = ["M4", "Shift"]
key = 0x0033 # 3
on_click = { action = "SendToWorkspace", args = 2 }
[[key-mapping]]
mods = ["M4", "Shift"]
key =  0x0034 # 4
on_click = { action = "SendToWorkspace", args = 3 }
[[key-mapping]]
mods = ["M4", "Shift"]
key =  0x0035 # 5
on_click = { action = "SendToWorkspace", args = 4 }
[[key-mapping]]
mods = ["M4", "Shift"]
key =  0x0036 # 6
on_click = { action = "SendToWorkspace", args = 5 }
[[key-mapping]]
mods = ["M4", "Shift"]
key =  0x0037 # 7
on_click = { action = "SendToWorkspace", args = 6 }
[[key-mapping]]
mods = ["M4", "Shift"]
key =  0x0038 # 8
on_click = { action = "SendToWorkspace", args = 7 }
[[key-mapping]]
mods = ["M4", "Shift"]
key =  0x0039 # 9
on_click = { action = "SendToWorkspace", args = 8 }
[[key-mapping]]
mods = ["M4", "Shift"]
key =  0xff0d # <Return/Enter>
on_click = { action = "Spawn", args = ["alacritty", []] }
[[key-mapping]]
mods = ["M4"]
key =  0x0064 # d
on_click = { action = "Spawn", args = ["dmenu_run", ["-i", "-p", "Run: "]] }
[[key-mapping]]
mods = []
key =  0xff61 # Print
on_click = { action = "Spawn", args = ["bash", ["-c", "maim -s -u | xclip -selection clipboard -t image/png -i"]] }
